;; Analyzed by ClojureScript 0.0-2850
{:defs {inside-interval? {:protocol-inline nil, :private true, :name flocking.kdtree/inside-interval?, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 25, :method-params ([interval point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 234, :end-line 234, :max-fixed-arity 2, :fn-var true, :arglists (quote ([interval point])), :test true}, points= {:protocol-inline nil, :private true, :name flocking.kdtree/points=, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 16, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 113, :end-line 113, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Compares 2 points represented by arrays of doubles and return true if they are equal", :test true}, nearest-neighbor {:protocol-inline nil, :name flocking.kdtree/nearest-neighbor, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 24, :method-params ([tree point] [tree point n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2} {:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 3}), :line 221, :end-line 221, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tree point] [tree point n])), :doc "Compute n nearest neighbors for a point. If n is\nomitted, the result is the nearest neighbor;\notherwise, the result is a list of length n.", :test true}, insert-internal {:protocol-inline nil, :private true, :name flocking.kdtree/insert-internal, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 24, :method-params ([tree point depth point-meta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag flocking.kdtree/Node, :variadic false, :max-fixed-arity 4}), :line 58, :end-line 58, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tree point depth point-meta])), :test true}, nearest-neighbor-internal {:protocol-inline nil, :private true, :name flocking.kdtree/nearest-neighbor-internal, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 34, :method-params ([tree point n dimension best]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 5}), :line 190, :end-line 190, :max-fixed-arity 5, :fn-var true, :arglists (quote ([tree point n dimension best])), :test true}, insert {:protocol-inline nil, :name flocking.kdtree/insert, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 14, :method-params ([tree point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag flocking.kdtree/Node, :variadic false, :max-fixed-arity 2}), :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tree point])), :doc "Adds a point to an existing tree.", :test true}, find-min {:protocol-inline nil, :name flocking.kdtree/find-min, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 16, :method-params ([tree dimension]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{clj cljs.core/MetaFn clj-nil}, :variadic false, :max-fixed-arity 2}), :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tree dimension])), :doc "Locate the point with the smallest value in a given dimension.\nUsed internally by the delete function. Runs in O(√n) time for a\nbalanced tree.", :test true}, Result {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name flocking.kdtree/Result, :file "src/flocking/kdtree.cljs", :end-column 19, :type true, :column 12, :internal-ctor true, :line 11, :record true, :end-line 11, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, interval-search-internal {:protocol-inline nil, :private true, :name flocking.kdtree/interval-search-internal, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 33, :method-params ([tree interval depth accum]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj any}, :variadic false, :max-fixed-arity 4}), :line 246, :end-line 246, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tree interval depth accum])), :test true}, ->Result {:protocol-inline nil, :name flocking.kdtree/->Result, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 19, :method-params ([point dist-squared]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :methods ({:tag flocking.kdtree/Result, :variadic false, :max-fixed-arity 2}), :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([point dist-squared])), :test true}, delete {:protocol-inline nil, :name flocking.kdtree/delete, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 14, :method-params ([tree point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{flocking.kdtree/Node clj-nil}, :variadic false, :max-fixed-arity 2}), :line 165, :end-line 165, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tree point])), :doc "Delete value at the given point. Runs in O(log n) time for a balanced tree.", :test true}, map->Node {:protocol-inline nil, :name flocking.kdtree/map->Node, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 17, :method-params ([G__18369]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :methods ({:tag flocking.kdtree/Node, :variadic false, :max-fixed-arity 1}), :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__18369])), :test true}, delete-internal {:protocol-inline nil, :private true, :name flocking.kdtree/delete-internal, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 24, :method-params ([tree point depth]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{flocking.kdtree/Node clj-nil}, :variadic false, :max-fixed-arity 3}), :line 121, :end-line 121, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tree point depth])), :test true}, find-min-internal {:protocol-inline nil, :private true, :name flocking.kdtree/find-min-internal, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 26, :method-params ([tree dimension depth]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 3}), :line 81, :end-line 81, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tree dimension depth])), :test true}, map->Result {:protocol-inline nil, :name flocking.kdtree/map->Result, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 19, :method-params ([G__18377]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :methods ({:tag flocking.kdtree/Result, :variadic false, :max-fixed-arity 1}), :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__18377])), :test true}, ->Node {:protocol-inline nil, :name flocking.kdtree/->Node, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 17, :method-params ([left right value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :methods ({:tag flocking.kdtree/Node, :variadic false, :max-fixed-arity 3}), :line 10, :end-line 10, :max-fixed-arity 3, :fn-var true, :arglists (quote ([left right value])), :test true}, interval-search {:protocol-inline nil, :name flocking.kdtree/interval-search, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 23, :method-params ([tree interval]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 271, :end-line 271, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tree interval])), :doc "Find all points inside given interval.\nInterval is a sequence of boundaries for each dimension.\nExample: interval 0≤x≤10, 5≤y≤20 represented as [[0 10] [5 20]]", :test true}, build-tree-internal {:protocol-inline nil, :private true, :name flocking.kdtree/build-tree-internal, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 28, :method-params ([points depth]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{flocking.kdtree/Node clj-nil}, :variadic false, :max-fixed-arity 2}), :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([points depth])), :test true}, dist-squared {:protocol-inline nil, :private true, :name flocking.kdtree/dist-squared, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 21, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :test true}, build-tree {:protocol-inline nil, :name flocking.kdtree/build-tree, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 18, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{flocking.kdtree/Node clj-nil}, :variadic false, :max-fixed-arity 1}), :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([points])), :doc "Construct a Kd-tree from points. Assumes all\npoints are of the same dimension.", :test true}, insert-sorted! {:protocol-inline nil, :private true, :name flocking.kdtree/insert-sorted!, :variadic false, :file "src/flocking/kdtree.cljs", :end-column 23, :method-params ([vec value n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj}, :variadic false, :max-fixed-arity 3}), :line 172, :end-line 172, :max-fixed-arity 3, :fn-var true, :arglists (quote ([vec value n])), :doc "Inserts value to sorted transient vector. Vector will not grow\nbigger than n elements.", :test true}, Node {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name flocking.kdtree/Node, :file "src/flocking/kdtree.cljs", :end-column 17, :type true, :column 12, :internal-ctor true, :line 10, :record true, :end-line 10, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}}, :name flocking.kdtree, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil}