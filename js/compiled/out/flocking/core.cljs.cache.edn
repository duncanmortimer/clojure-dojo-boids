;; Analyzed by ClojureScript 0.0-2850
{:defs {update-position {:protocol-inline nil, :name flocking.core/update-position, :variadic false, :file "src/flocking/core.cljs", :end-column 23, :method-params ([p__7094]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [x y vx vy], :as boid}])), :test true}, render-boid {:protocol-inline nil, :name flocking.core/render-boid, :variadic false, :file "src/flocking/core.cljs", :end-column 19, :method-params ([coord-scale velocity-scale]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 2}), :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coord-scale velocity-scale])), :test true}, ranges {:file "src/flocking/core.cljs", :line 9, :column 1, :end-line 9, :end-column 13, :test true, :name flocking.core/ranges}, random-boid {:protocol-inline nil, :name flocking.core/random-boid, :variadic false, :file "src/flocking/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 0}), :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, centre-of-mass {:protocol-inline nil, :name flocking.core/centre-of-mass, :variadic false, :file "src/flocking/core.cljs", :end-column 22, :method-params ([boids]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([boids])), :test true}, update-velocity {:protocol-inline nil, :name flocking.core/update-velocity, :variadic false, :file "src/flocking/core.cljs", :end-column 23, :method-params ([force boid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([force boid])), :test true}, separation-neighbourhood {:file "src/flocking/core.cljs", :line 39, :column 1, :end-line 39, :end-column 31, :test true, :name flocking.core/separation-neighbourhood}, boids {:file "src/flocking/core.cljs", :line 153, :column 1, :end-line 153, :end-column 16, :test true, :name flocking.core/boids}, run {:protocol-inline nil, :name flocking.core/run, :variadic false, :file "src/flocking/core.cljs", :end-column 11, :method-params ([boids-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([boids-atom])), :test true}, cohesion-coeff {:file "src/flocking/core.cljs", :line 37, :column 1, :end-line 37, :end-column 21, :test true, :name flocking.core/cohesion-coeff}, cohesion-force {:protocol-inline nil, :name flocking.core/cohesion-force, :variadic false, :file "src/flocking/core.cljs", :end-column 22, :method-params ([cm boid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cm boid])), :test true}, limit {:protocol-inline nil, :name flocking.core/limit, :variadic false, :file "src/flocking/core.cljs", :end-column 13, :method-params ([v m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil number}, :variadic false, :max-fixed-arity 2}), :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v m])), :test true}, alignment-coeff {:file "src/flocking/core.cljs", :line 40, :column 1, :end-line 40, :end-column 22, :test true, :name flocking.core/alignment-coeff}, config {:file "src/flocking/core.cljs", :line 152, :column 1, :end-line 152, :end-column 17, :test true, :name flocking.core/config}, separation-force {:protocol-inline nil, :name flocking.core/separation-force, :variadic false, :file "src/flocking/core.cljs", :end-column 24, :method-params ([tree boid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 61, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tree boid])), :test true}, simulation {:file "src/flocking/core.cljs", :line 154, :column 1, :end-line 154, :end-column 21, :test true, :name flocking.core/simulation}, start {:protocol-inline nil, :name flocking.core/start, :variadic false, :file "src/flocking/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 156, :end-line 156, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, flock-debug {:protocol-inline nil, :name flocking.core/flock-debug, :variadic false, :file "src/flocking/core.cljs", :end-column 19, :method-params ([boids-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([boids-atom])), :test true}, mount-debug {:protocol-inline nil, :name flocking.core/mount-debug, :variadic false, :file "src/flocking/core.cljs", :end-column 19, :method-params ([boids-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([boids-atom])), :test true}, render-flock {:protocol-inline nil, :name flocking.core/render-flock, :variadic false, :file "src/flocking/core.cljs", :end-column 20, :method-params ([boids-atom config-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists (quote ([boids-atom config-atom])), :test true}, calculate-forces {:protocol-inline nil, :name flocking.core/calculate-forces, :variadic false, :file "src/flocking/core.cljs", :end-column 24, :method-params ([boids]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([boids])), :test true}, init-boids {:protocol-inline nil, :name flocking.core/init-boids, :variadic false, :file "src/flocking/core.cljs", :end-column 18, :method-params ([n boid-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n boid-atom])), :test true}, alignment-neighbourhood {:file "src/flocking/core.cljs", :line 41, :column 1, :end-line 41, :end-column 30, :test true, :name flocking.core/alignment-neighbourhood}, begin {:protocol-inline nil, :name flocking.core/begin, :variadic false, :file "src/flocking/core.cljs", :end-column 13, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 0} {:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([] [n])), :test true}, update-boids {:protocol-inline nil, :name flocking.core/update-boids, :variadic false, :file "src/flocking/core.cljs", :end-column 20, :method-params ([boids]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([boids])), :test true}, stop {:protocol-inline nil, :name flocking.core/stop, :variadic false, :file "src/flocking/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 160, :end-line 160, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, total-force {:protocol-inline nil, :name flocking.core/total-force, :variadic false, :file "src/flocking/core.cljs", :end-column 19, :method-params ([cm tree boid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 3}), :line 81, :end-line 81, :max-fixed-arity 3, :fn-var true, :arglists (quote ([cm tree boid])), :test true}, mountit {:protocol-inline nil, :name flocking.core/mountit, :variadic false, :file "src/flocking/core.cljs", :end-column 15, :method-params ([boids-atom config-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 147, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists (quote ([boids-atom config-atom])), :test true}, boid {:protocol-inline nil, :name flocking.core/boid, :variadic false, :file "src/flocking/core.cljs", :end-column 12, :method-params ([x y vx vy]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 4}), :line 14, :end-line 14, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y vx vy])), :test true}, separation-coeff {:file "src/flocking/core.cljs", :line 38, :column 1, :end-line 38, :end-column 23, :test true, :name flocking.core/separation-coeff}, alignment-force {:protocol-inline nil, :name flocking.core/alignment-force, :variadic false, :file "src/flocking/core.cljs", :end-column 23, :method-params ([tree boid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tree boid])), :test true}, rand-int-between {:protocol-inline nil, :name flocking.core/rand-int-between, :variadic false, :file "src/flocking/core.cljs", :end-column 24, :method-params ([p__7085]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[l h]])), :test true}}, :name flocking.core, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {kdtree flocking.kdtree, flocking.kdtree flocking.kdtree, reagent.core reagent.core, rc reagent.core}, :imports nil}