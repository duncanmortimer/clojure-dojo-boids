;; Analyzed by ClojureScript 0.0-2850
{:defs {union {:protocol-inline nil, :name clojure.set/union, :variadic true, :file "resources/public/js/compiled/out/clojure/set.cljs", :end-column 13, :method-params ([] [s1] [s1 s2] [s1 s2 sets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/ISet, :variadic false, :max-fixed-arity 0} {:variadic false, :max-fixed-arity 1} {:tag #{nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([] [s1] [s1 s2] [s1 s2 & sets])), :doc "Return a set that is the union of the input sets", :test true}, map-invert {:protocol-inline nil, :name clojure.set/map-invert, :variadic false, :file "resources/public/js/compiled/out/clojure/set.cljs", :end-column 18, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the map with the vals mapped to the keys.", :test true}, join {:protocol-inline nil, :name clojure.set/join, :variadic false, :file "resources/public/js/compiled/out/clojure/set.cljs", :end-column 12, :method-params ([xrel yrel] [xrel yrel km]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any cljs.core/ISet}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :line 101, :end-line 101, :max-fixed-arity 3, :fn-var true, :arglists (quote ([xrel yrel] [xrel yrel km])), :doc "When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.", :test true}, select {:protocol-inline nil, :name clojure.set/select, :variadic false, :file "resources/public/js/compiled/out/clojure/set.cljs", :end-column 14, :method-params ([pred xset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 61, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred xset])), :doc "Returns a set of the elements for which pred is true", :test true}, intersection {:protocol-inline nil, :name clojure.set/intersection, :variadic true, :file "resources/public/js/compiled/out/clojure/set.cljs", :end-column 20, :method-params ([s1] [s1 s2] [s1 s2 sets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1} {:tag #{nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s1] [s1 s2] [s1 s2 & sets])), :doc "Return a set that is the intersection of the input sets", :test true}, superset? {:protocol-inline nil, :name clojure.set/superset?, :variadic false, :file "resources/public/js/compiled/out/clojure/set.cljs", :end-column 17, :method-params ([set1 set2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 137, :end-line 137, :max-fixed-arity 2, :fn-var true, :arglists (quote ([set1 set2])), :doc "Is set1 a superset of set2?", :test true}, index {:protocol-inline nil, :name clojure.set/index, :variadic false, :file "resources/public/js/compiled/out/clojure/set.cljs", :end-column 13, :method-params ([xrel ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xrel ks])), :doc "Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.", :test true}, bubble-max-key {:protocol-inline nil, :private true, :name clojure.set/bubble-max-key, :variadic false, :file "resources/public/js/compiled/out/clojure/set.cljs", :end-column 23, :method-params ([k coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/Cons, :variadic false, :max-fixed-arity 2}), :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k coll])), :test true}, subset? {:protocol-inline nil, :name clojure.set/subset?, :variadic false, :file "resources/public/js/compiled/out/clojure/set.cljs", :end-column 15, :method-params ([set1 set2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists (quote ([set1 set2])), :doc "Is set1 a subset of set2?", :test true}, rename {:protocol-inline nil, :name clojure.set/rename, :variadic false, :file "resources/public/js/compiled/out/clojure/set.cljs", :end-column 14, :method-params ([xrel kmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xrel kmap])), :doc "Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap", :test true}, rename-keys {:protocol-inline nil, :name clojure.set/rename-keys, :variadic false, :file "resources/public/js/compiled/out/clojure/set.cljs", :end-column 19, :method-params ([map kmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([map kmap])), :doc "Returns the map with the keys in kmap renamed to the vals in kmap", :test true}, project {:protocol-inline nil, :name clojure.set/project, :variadic false, :file "resources/public/js/compiled/out/clojure/set.cljs", :end-column 15, :method-params ([xrel ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xrel ks])), :doc "Returns a rel of the elements of xrel with only the keys in ks", :test true}, difference {:protocol-inline nil, :name clojure.set/difference, :variadic true, :file "resources/public/js/compiled/out/clojure/set.cljs", :end-column 18, :method-params ([s1] [s1 s2] [s1 s2 sets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1} {:tag #{nil any}, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s1] [s1 s2] [s1 s2 & sets])), :doc "Return a set that is the first set without elements of the remaining sets", :test true}}, :name clojure.set, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil}