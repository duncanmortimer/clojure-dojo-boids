;; Analyzed by ClojureScript 0.0-2850
{:defs {focus-msgs {:protocol-inline nil, :name figwheel.client/focus-msgs, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 18, :method-params ([name-set msg-hist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/Cons, :variadic false, :max-fixed-arity 2}), :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name-set msg-hist])), :test true}, handle-deprecated-jsload-callback {:protocol-inline nil, :name figwheel.client/handle-deprecated-jsload-callback, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 41, :method-params ([config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj clj-nil}, :variadic false, :max-fixed-arity 1}), :line 277, :end-line 277, :max-fixed-arity 1, :fn-var true, :arglists (quote ([config])), :test true}, default-on-compile-fail {:protocol-inline nil, :name figwheel.client/default-on-compile-fail, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 31, :method-params ([p__25410]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 232, :end-line 232, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [formatted-exception exception-data], :as ed}])), :test true}, reload-file?* {:protocol-inline nil, :name figwheel.client/reload-file?*, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 21, :method-params ([msg-name opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean any}, :variadic false, :max-fixed-arity 2}), :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([msg-name opts])), :test true}, __figwheel-start-once__ {:file "resources/public/js/compiled/out/figwheel/client.cljs", :line 313, :column 4, :end-line 313, :end-column 37, :test true, :name figwheel.client/__figwheel-start-once__}, error-msg-format {:protocol-inline nil, :name figwheel.client/error-msg-format, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 24, :method-params ([p__24840]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [message class]}])), :test true}, compile-fail-warning-plugin {:protocol-inline nil, :name figwheel.client/compile-fail-warning-plugin, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 35, :method-params ([p__25016]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [on-compile-warning on-compile-fail]}])), :test true}, console-print {:protocol-inline nil, :name figwheel.client/console-print, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 21, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([args])), :test true}, add-plugins {:protocol-inline nil, :name figwheel.client/add-plugins, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 19, :method-params ([plugins system-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 2}), :line 304, :end-line 304, :max-fixed-arity 2, :fn-var true, :arglists (quote ([plugins system-options])), :test true}, figwheel-repl-print {:protocol-inline nil, :name figwheel.client/figwheel-repl-print, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 27, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([args])), :test true}, file-reloader-plugin {:protocol-inline nil, :name figwheel.client/file-reloader-plugin, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 28, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :test true}, heads-up-plugin-msg-handler {:protocol-inline nil, :name figwheel.client/heads-up-plugin-msg-handler, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 35, :method-params ([opts msg-hist']), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 162, :end-line 162, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts msg-hist'])), :test true}, watch-and-reload-with-opts {:file "resources/public/js/compiled/out/figwheel/client.cljs", :line 331, :column 1, :end-line 331, :end-column 33, :test true, :name figwheel.client/watch-and-reload-with-opts}, compile-fail-state? {:protocol-inline nil, :name figwheel.client/compile-fail-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 27, :method-params ([msg-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-names])), :test true}, format-messages {:file "resources/public/js/compiled/out/figwheel/client.cljs", :line 42, :column 1, :end-line 42, :end-column 22, :test true, :name figwheel.client/format-messages}, css-reloader-plugin {:protocol-inline nil, :name figwheel.client/css-reloader-plugin, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 27, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :test true}, ensure-cljs-user {:protocol-inline nil, :name figwheel.client/ensure-cljs-user, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 0}), :line 132, :end-line 132, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "The REPL can disconnect and reconnect lets ensure cljs.user exists at least.", :test true}, watch-and-reload {:protocol-inline nil, :name figwheel.client/watch-and-reload, :variadic true, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 24, :method-params ([p__25471]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic true, :max-fixed-arity 0}), :line 332, :end-line 332, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [], :as opts}])), :test true}, start {:protocol-inline nil, :name figwheel.client/start, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 13, :method-params ([opts] []), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1} {:tag #{any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 311, :end-line 311, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts] [])), :test true}, repl-plugin {:protocol-inline nil, :name figwheel.client/repl-plugin, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 19, :method-params ([p__25001]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [build-id], :as opts}])), :test true}, eval-javascript** {:protocol-inline nil, :name figwheel.client/eval-javascript**, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 27, :method-params ([code result-handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :methods ({:variadic false, :max-fixed-arity 2}), :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([code result-handler])), :test true}, heads-up-plugin {:protocol-inline nil, :name figwheel.client/heads-up-plugin, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 23, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 195, :end-line 195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :test true}, css-loaded-state? {:protocol-inline nil, :name figwheel.client/css-loaded-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 25, :method-params ([msg-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-names])), :test true}, heads-up-config-options** {:file "resources/public/js/compiled/out/figwheel/client.cljs", :line 197, :column 5, :end-line 197, :end-column 36, :test true, :name figwheel.client/heads-up-config-options**}, block-reload-file-state? {:protocol-inline nil, :name figwheel.client/block-reload-file-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 32, :method-params ([msg-names opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([msg-names opts])), :test true}, rewarning-state? {:protocol-inline nil, :name figwheel.client/rewarning-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 24, :method-params ([msg-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-names])), :test true}, get-essential-messages {:protocol-inline nil, :name figwheel.client/get-essential-messages, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 30, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core/Cons clj-nil}, :variadic false, :max-fixed-arity 1}), :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed])), :test true}, default-on-jsload {:protocol-inline nil, :name figwheel.client/default-on-jsload, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 25, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 226, :end-line 226, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :test true}, base-plugins {:protocol-inline nil, :name figwheel.client/base-plugins, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 20, :method-params ([system-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{clj cljs.core/MetaFn cljs.core/IMap clj-nil}, :variadic false, :max-fixed-arity 1}), :line 284, :end-line 284, :max-fixed-arity 1, :fn-var true, :arglists (quote ([system-options])), :test true}, default-on-cssload {:protocol-inline nil, :name figwheel.client/default-on-cssload, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 26, :method-params ([files]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 246, :end-line 246, :max-fixed-arity 1, :fn-var true, :arglists (quote ([files])), :test true}, enforce-project-plugin {:protocol-inline nil, :name figwheel.client/enforce-project-plugin, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 30, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 205, :end-line 205, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :test true}, warning-append-state? {:protocol-inline nil, :name figwheel.client/warning-append-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 29, :method-params ([msg-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-names])), :test true}, config-defaults {:file "resources/public/js/compiled/out/figwheel/client.cljs", :line 251, :column 1, :end-line 251, :end-column 26, :test true, :name figwheel.client/config-defaults}, compile-refail-state? {:protocol-inline nil, :name figwheel.client/compile-refail-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 29, :method-params ([msg-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-names])), :test true}, reload-file-state? {:protocol-inline nil, :name figwheel.client/reload-file-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 26, :method-params ([msg-names opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean any}, :variadic false, :max-fixed-arity 2}), :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([msg-names opts])), :test true}, default-on-compile-warning {:protocol-inline nil, :name figwheel.client/default-on-compile-warning, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 34, :method-params ([p__25442]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 238, :end-line 238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [message], :as w}])), :test true}, warning-state? {:protocol-inline nil, :name figwheel.client/warning-state?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 22, :method-params ([msg-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-names])), :test true}, default-before-load {:protocol-inline nil, :name figwheel.client/default-before-load, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 27, :method-params ([files]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 242, :end-line 242, :max-fixed-arity 1, :fn-var true, :arglists (quote ([files])), :test true}, enable-repl-print! {:protocol-inline nil, :name figwheel.client/enable-repl-print!, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 0}), :line 27, :end-line 27, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, truncate-stack-trace {:protocol-inline nil, :name figwheel.client/truncate-stack-trace, :variadic false, :file "resources/public/js/compiled/out/figwheel/client.cljs", :end-column 28, :method-params ([stack-str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stack-str])), :test true}}, :name figwheel.client, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :require-macros {cljs.repl cljs.repl, cljs.core.async.macros cljs.core.async.macros}, :uses {timeout cljs.core.async, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, alts! cljs.core.async, map< cljs.core.async, put! cljs.core.async}, :requires {guri goog.Uri, async cljs.core.async, goog.Uri goog.Uri, cljs.core.async cljs.core.async, socket figwheel.client.socket, figwheel.client.file-reloading figwheel.client.file-reloading, reloading figwheel.client.file-reloading, string clojure.string, figwheel.client.utils figwheel.client.utils, cljs.repl cljs.repl, utils figwheel.client.utils, figwheel.client.heads-up figwheel.client.heads-up, figwheel.client.socket figwheel.client.socket, heads-up figwheel.client.heads-up, clojure.string clojure.string}, :imports nil}