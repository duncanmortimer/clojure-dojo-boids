;; Analyzed by ClojureScript 0.0-2850
{:defs {add-link-to-doc {:protocol-inline nil, :name figwheel.client.file-reloading/add-link-to-doc, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 23, :method-params ([new-link] [orig-link klone]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 278, :end-line 278, :max-fixed-arity 2, :fn-var true, :arglists (quote ([new-link] [orig-link klone])), :test true}, matches-file? {:protocol-inline nil, :name figwheel.client.file-reloading/matches-file?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 21, :method-params ([p__26463 link]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core/IMap clj-nil}, :variadic false, :max-fixed-arity 2}), :line 239, :end-line 239, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [file]} link])), :test true}, add-request-urls {:protocol-inline nil, :name figwheel.client.file-reloading/add-request-urls, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 24, :method-params ([opts files]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :line 161, :end-line 161, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts files])), :test true}, namespace-file-map? {:protocol-inline nil, :name figwheel.client.file-reloading/namespace-file-map?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 27, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}, current-links {:protocol-inline nil, :name figwheel.client.file-reloading/current-links, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 228, :end-line 228, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, reload-css-files {:protocol-inline nil, :name figwheel.client.file-reloading/reload-css-files, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 24, :method-params ([p__26474 files-msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core.async.impl.channels/ManyToManyChannel clj-nil}, :variadic false, :max-fixed-arity 2}), :line 294, :end-line 294, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [on-cssload], :as opts} files-msg])), :test true}, add-cache-buster {:protocol-inline nil, :name figwheel.client.file-reloading/add-cache-buster, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 24, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :test true}, get-correct-link {:protocol-inline nil, :name figwheel.client.file-reloading/get-correct-link, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 24, :method-params ([f-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 255, :end-line 255, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f-data])), :test true}, all? {:protocol-inline nil, :name figwheel.client.file-reloading/all?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 12, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :test true}, js-reload {:protocol-inline nil, :name figwheel.client.file-reloading/js-reload, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 17, :method-params ([p__25898 callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 125, :end-line 125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [request-url namespace], :as file-msg} callback])), :test true}, truncate-url {:protocol-inline nil, :name figwheel.client.file-reloading/truncate-url, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 20, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 232, :end-line 232, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :test true}, ns-to-js-file {:protocol-inline nil, :name figwheel.client.file-reloading/ns-to-js-file, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 21, :method-params ([ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns])), :test true}, clone-link {:protocol-inline nil, :name figwheel.client.file-reloading/clone-link, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 18, :method-params ([link url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 264, :end-line 264, :max-fixed-arity 2, :fn-var true, :arglists (quote ([link url])), :test true}, add-request-url {:protocol-inline nil, :name figwheel.client.file-reloading/add-request-url, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 23, :method-params ([p__25996 p__25997]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [url-rewriter], :as opts} {:keys [file], :as file-msg}])), :test true}, reload-base {:file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :line 70, :column 1, :end-line 70, :end-column 23, :test true, :name figwheel.client.file-reloading/reload-base}, patch-goog-base {:protocol-inline nil, :name figwheel.client.file-reloading/patch-goog-base, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 0}), :line 44, :end-line 44, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, reload-file? {:protocol-inline nil, :name figwheel.client.file-reloading/reload-file?, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 20, :method-params ([p__25895]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean any}, :variadic false, :max-fixed-arity 1}), :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [namespace meta-data], :as file-msg}])), :test true}, reload-css-file {:protocol-inline nil, :name figwheel.client.file-reloading/reload-css-file, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 23, :method-params ([p__26471]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 289, :end-line 289, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [file request-url], :as f-data}])), :test true}, resolve-url {:file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :line 62, :column 1, :end-line 62, :end-column 23, :test true, :name figwheel.client.file-reloading/resolve-url}, resolve-ns {:protocol-inline nil, :name figwheel.client.file-reloading/resolve-ns, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 18, :method-params ([ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns])), :test true}, reload-js-file {:protocol-inline nil, :name figwheel.client.file-reloading/reload-js-file, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 22, :method-params ([file-msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([file-msg])), :test true}, eval-body {:protocol-inline nil, :name figwheel.client.file-reloading/eval-body, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 17, :method-params ([p__26002]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [eval-body file]}])), :test true}, load-all-js-files {:protocol-inline nil, :name figwheel.client.file-reloading/load-all-js-files, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 25, :method-params ([files]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([files])), :doc "Returns a chanel with one collection of loaded filenames on it.", :test true}, reload-file* {:protocol-inline nil, :name figwheel.client.file-reloading/reload-file*, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 20, :method-params ([request-url callback] [request-url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 1}), :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request-url callback] [request-url])), :test true}, create-link {:protocol-inline nil, :name figwheel.client.file-reloading/create-link, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 19, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 272, :end-line 272, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :test true}, reload-js-files {:protocol-inline nil, :name figwheel.client.file-reloading/reload-js-files, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 23, :method-params ([p__26011 p__26012]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [before-jsload on-jsload load-unchanged-files], :as opts} {:keys [files], :as msg}])), :test true}, reload-file {:protocol-inline nil, :name figwheel.client.file-reloading/reload-file, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/file_reloading.cljs", :end-column 19, :method-params ([p__25892 callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [request-url], :as file-msg} callback])), :test true}}, :name figwheel.client.file-reloading, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros, dev-assert figwheel.client.utils, go-loop cljs.core.async.macros}, :require-macros {utils figwheel.client.utils, figwheel.client.utils figwheel.client.utils, cljs.core.async.macros cljs.core.async.macros}, :uses {timeout cljs.core.async, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, alts! cljs.core.async, difference clojure.set, map< cljs.core.async, put! cljs.core.async}, :requires {guri goog.Uri, goog.string goog.string, loader goog.net.jsloader, async cljs.core.async, goog.net.jsloader goog.net.jsloader, goog.Uri goog.Uri, cljs.core.async cljs.core.async, clojure.set clojure.set, string clojure.string, figwheel.client.utils figwheel.client.utils, utils figwheel.client.utils, clojure.string clojure.string}, :imports nil}